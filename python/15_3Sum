"""

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105

"""


'Solution 1: '


from typing import List

def threeSum(nums):

    # Sort the array to make it easier to manage duplicates and use two pointers
    nums.sort()
    result = []

    # Iterate through the array, fixing one element at a time
    for i in range(len(nums) - 2):

        # Skip duplicate elements to avoid duplicate triplets in the result
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        
        # Initialize two pointers
        left, right = i + 1, len(nums) - 1
        
        # Use the two-pointer technique to find the remaining two elements
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            
            if total == 0:

                # Found a triplet, add it to the result list
                result.append([nums[i], nums[left], nums[right]])
                
                # Move the left pointer to the right, skipping duplicates
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                left += 1
                
                # Move the right pointer to the left, skipping duplicates
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                right -= 1

            elif total < 0:
                # If the total is less than zero, move the left pointer to the right
                left += 1

            else:
                # If the total is greater than zero, move the right pointer to the left
                right -= 1
                
    return result



'Solution 2: Time exceeded error'


def threeSum(nums):
    out = []

    # Sort the array to help handle duplicates
    nums.sort()  

    for i in range(len(nums)):
        if i > 0 and nums[i] == nums[i - 1]:

            # Skip duplicates for the first element
            continue  


        for j in range(i + 1, len(nums)):
            if j > i + 1 and nums[j] == nums[j - 1]:

                # Skip duplicates for the second element
                continue  

            for k in range(j + 1, len(nums)):
                if k > j + 1 and nums[k] == nums[k - 1]:

                    # Skip duplicates for the third element
                    continue  


                if nums[i] + nums[j] + nums[k] == 0:
                    out.append([nums[i], nums[j], nums[k]])

    return out
